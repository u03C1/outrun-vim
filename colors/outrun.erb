<%
    # RNB, A VIM COLORSCHEME TEMPLATE
    # Author:        Romain Lafourcade (https://github.com/romainl)
    # Canonical URL: https://github.com/romainl/vim-rnb

    # This template is designed to help vimmers create their own colorschemes
    # without much effort.
    #
    # You will need Ruby to generate your colorscheme but Ruby knowledge is
    # not needed at all.
    #
    # The process is divided in five steps:
    #   1. rename the template,
    #   2. edit your colorscheme's information,
    #   3. define your colors,
    #   4. define your highlight groups and links,
    #   5. and generate your colorscheme.

    # Step 1: renaming
    #
    # If this file is distributed with a colorscheme it's probably already named correctly
    # and you can skip this step.
    #
    # If you forked/cloned/copied this repository to create your own colorscheme, you will have to
    # rename this template to match the name of your colorscheme.
    #
    # NOTE: Vim doesn't really care about whitespace in the name of the colorscheme but it does for
    # filenames so make sure your filename doesn't have any whitespace character.
    #
    #   colorscheme name | template filename | colorscheme filename
    #  ------------------|-------------------|----------------------
    #   foobar           | foobar.erb        | foobar.vim
    #   foo-bar          | foo-bar.erb       | foo-bar.vim
    #   foo_bar          | foo_bar.erb       | foo_bar.vim
    #   foo bar          | foo-bar.erb or    | foo-bar.vim or
    #                    | foo_bar.erb       | foo_bar.vim

    # Step 2: information
    #
    # Make sure the name of your colorscheme is unique and attractive.
    # The description should fit in a single line with no linefeed.
    information = {
        author:      "Raphael DB",
        email: "https://github.com/u03c1",
        name:        "Outrun",
        description: "A dark theme, with some retrowave accent.",
        webpage:     "https://github.com/u03c1/outrun-vim"
    }

    # Step 3: colors
    #
    # black = [       give each color a distinctive name
    #   "#000000",    hexadecimal color used in GVim/MacVim or "NONE"
    #   0,            integer between 0 and 255 used by terminals supporting 256 colors
    #                 or "NONE"
    #   "black"       color name used by less capable color terminals, can be "darkred",
    #                 "red", "darkgreen", "green", "darkyellow", "yellow", "darkblue",
    #                 "blue", "darkmagenta", "magenta", "black", "darkgrey", "grey",
    #                 "white", or "NONE"
    # ]
    #
    # If your colors are defined correctly, the resulting colorscheme is guaranteed
    # to work in GVim (Windows/Linux), MacVim (MacOS), and any properly set up terminal emulator.
    black       = ["#242A33", 0, "black"]
    red         = ["#d98282", 1, "darkred"]
    darkgreen   = ["#9ed494", 2, "darkgreen"]
    orange      = ["#D9C8B3", 3, "darkyellow"]
    darkblue    = ["#8ccff5", 4, "darkblue"]
    darkmagenta = ["#C3C1FE", 5, "darkmagenta"]
    darkcyan    = ["#63D8DB", 6, "darkcyan"]
    gray        = ["#c0c0c0", 7, "gray"]
    darkgray    = ["#666677", 8, "darkgray"]
    pink        = ["#d982b6", 9, "red"]
    green       = ["#b8dfb2", 10, "green"]
    yellow      = ["#d8e6a1", 11, "yellow"]
    blue        = ["#b0daf6", 12, "blue"]
    magenta     = ["#d2d0fc", 13, "magenta"]
    cyan        = ["#9ae1e3", 14, "cyan"]
    white       = ["#DADAEA", 15, "white"]

    altblack    = ["#11263B", 0, "black"]
    ui_discret  = ["#414854", 239, "gray"]

    gray232     = ["#080808", 232, "darkgray"]
    gray233     = ["#121212", 233, "darkgray"]
    gray234     = ["#1c1c1c", 234, "darkgray"]
    gray235     = ["#262626", 235, "darkgray"]
    gray236     = ["#303030", 236, "darkgray"]
    gray237     = ["#3A3A3A", 237, "darkgray"]
    gray238     = ["#444444", 238, "darkgray"]
    gray239     = ["#4E4E4E", 239, "darkgray"]
    gray242     =  ["#6C6C6C", 242, "darkgray"]
    gray245     = ["#8a8a8a", 245, "darkgray"]
    gray246     = ["#949494", 246, "gray"]
    gray247     = ["#9e9e9e", 247, "gray"]
    gray255     = ["#eeeeee", 255, "gray"]

    # Step 4: highlights
    #
    # You can define highlight groups like this:
    #
    #   [ "Normal",       name of the highlight group
    #     white,          the color used for background color, or use "NONE", "fg" or "bg"
    #     darkgray,       the color used for foreground color, or use "NONE", "fg" or "bg"
    #     "NONE"          style, can be "bold", "underline", "reverse", "italic",
    #                     "standout", "NONE", "undercurl", or a comma-separated list of
    #                     valid attributes like "underline,bold"
    #   ]
    #
    # The sample above tells Vim to render normal text in dark gray against a white
    # background, without any other styling.
    #
    # Or you can link an highlight group to another. Here, "Title" will inherit its style from
    # "Normal":
    #
    #   [ "Title", "Normal" ]
    #
    # In GUI Vim, there is an additional color for the undercurl used to
    # highlight spelling mistakes:
    #
    #   [ "SpellBad",     name of the highlight group
    #     "NONE",         the color used for background color, or use "NONE", "fg" or "bg"
    #     red,            the color used for foreground color, or use "NONE", "fg" or "bg"
    #     "undercurl",    style
    #     red             color used for the undercurl
    #   ]
    #
    # The sample above tells Vim to render badly spelled words in red against the current
    # background, with a red undercurl.
    #
    # You can add any custom highlight group to the standard list below but you shouldn't
    # remove any if you want a working colorscheme. Most of them are described under
    # :help highlight-default, the others are taken from :help group-name. Both help sections
    # are good reads, by the way.
    highlights = [
        [ "Normal", black, white, "NONE" ],
        [ "NonText", "NONE", gray245, "NONE" ],
        [ "EndOfBuffer","NonText" ],
        #[ "Comment", "NONE", gray247, "italic" ],
        [ "Comment", "NONE", orange, "italic" ],
        [ "Constant", "NONE", green, "NONE" ],
        [ "Error", black, red, "NONE" ],
        [ "Identifier", "NONE", white, "NONE" ],
        [ "Ignore", "NONE", white, "NONE" ],
        [ "PreProc", "NONE", white, "NONE" ],
        [ "Special", "NONE", white, "NONE" ],
        [ "Statement", "NONE", "NONE", "NONE" ],
        [ "String", "NONE", blue, "NONE" ],
        [ "Number", "NONE", yellow, "NONE" ],
        [ "Todo", black, white, "NONE" ],
        [ "Type", "NONE", white, "NONE" ],
        [ "Underlined", black, white, "REVERSE" ],
        [ "StatusLine", gray235, pink, "NONE" ],
        [ "StatusLineNC", gray235, gray, "NONE" ],
        [ "StatusLineTerm", "StatusLine" ],
        [ "StatusLineTermNC", "StatusLineNC" ],
        [ "VertSplit", black, gray238, "NONE" ],
        [ "TabLine", black, white, "NONE" ],
        [ "TabLineFill", black, white, "NONE" ],
        [ "TabLineSel", black, white, "NONE" ],
        [ "Title", black, white, "NONE" ],
        [ "CursorLine", gray236, "NONE", "NONE" ],
        [ "LineNr", "NONE", gray239, "NONE" ],
        [ "CursorLineNr", "NONE", gray245, "NONE" ],
        [ "helpLeadBlank", black, white, "NONE" ],
        [ "helpNormal", black, white, "NONE" ],
        [ "Visual", blue, gray232, "NONE" ],
        [ "VisualNOS", red, white, "NONE" ],
        [ "Pmenu", gray238, white, "NONE" ],
        [ "PmenuSbar", black, white, "NONE" ],
        [ "PmenuSel", white, black, "NONE" ],
        [ "PmenuThumb", green, black, "NONE" ],
        [ "FoldColumn", "NONE", white, "NONE" ],
        [ "Folded", black, white, "NONE" ],
        [ "WildMenu", black, white, "NONE" ],
        [ "SpecialKey", black, white, "NONE" ],
        [ "DiffAdd", "NONE", green, "NONE" ],
        [ "DiffChange", "NONE", orange, "NONE" ],
        [ "DiffDelete", "NONE", red, "NONE" ],
        [ "DiffText", "NONE", blue, "NONE" ],
        [ "IncSearch", red, white, "NONE" ],
        [ "Search", green, black, "NONE" ],
        [ "Directory", black, darkblue, "NONE" ],
        [ "MatchParen", pink, black, "NONE" ],
        [ "SpellBad", black, white, "NONE", red ],
        [ "SpellCap", black, white, "NONE", blue ],
        [ "SpellLocal", black, white, "NONE", magenta ],
        [ "SpellRare", black, white, "NONE", cyan ],
        [ "ColorColumn", black, red, "NONE" ],
        [ "SignColumn", "NONE", magenta, "NONE" ],
        [ "ErrorMsg", black, white, "NONE" ],
        [ "ModeMsg", black, white, "NONE" ],
        [ "MoreMsg", black, white, "NONE" ],
        [ "Question", black, white, "NONE" ],
        [ "WarningMsg", "Error" ],
        [ "Cursor", gray237, white, "NONE" ],
        [ "CursorIM", "Cursor" ],
        [ "CursorColumn", red, white, "NONE" ],
        [ "QuickFixLine", black, white, "NONE" ],
        [ "Terminal", "Normal" ],
        [ "Conceal", black, white, "NONE" ],
        [ "ToolbarLine", black, white, "NONE" ],
        [ "ToolbarButton", black, white, "NONE" ],
        [ "debugPC", black, white, "NONE" ],
        [ "debugBreakpoint", red, white, "NONE" ],

        # Misc
        [ "Foreground", "NONE", white, "NONE" ],
        [ "MatchwordCur", "MatchParen"],
        [ "qfLineNr", "NONE", orange, "NONE" ],

        # Code alias
        [ "Boolean", "NONE", darkmagenta, "NONE" ],
        [ "Builtin", "NONE", darkmagenta, "NONE" ],
        [ "Conditional", "NONE", pink, "NONE" ],
        [ "Doc", "Comment"],
        [ "Function", "NONE", white, "NONE" ],
        [ "Repeat", "NONE",pink, "NONE" ],
        [ "Structure", "NONE", cyan, "NONE" ],
        [ "Tags", "NONE", white, "NONE" ],
        [ "showReturn", "NONE", pink, "NONE" ],

        # Custom StatusLine
        [ "BranchStatus",  gray235, pink ,"NONE"],
        [ "FileStatus",  gray235, pink, "NONE"],
        [ "InactiveStatus",  gray236, gray245 ,"NONE"],
        [ "NormalStatus",  gray235, gray ,"NONE"],
        [ "ROStatus",  yellow, gray235, "NONE"],
        [ "RootStatus",  gray235, gray, "NONE"],
        [ "StatusLinterError",  red, gray235, "BOLD"],

        # ALE
        [ "ALEErrorSign",  "NONE", red, "NONE"],
        [ "ALEWarningSign",  "NONE", gray245, "NONE"],

        # FloatingWin
        [ "FloatBorder",  "NONE", white, "NONE"],
        [ "NormalFloat",  gray235, gray255, "NONE"],

        # IndentBlankLine
        [ "IndentBlanklineChar",  "NONE", gray237, "NONE"],
        [ "IndentBlanklineContextChar",  "NONE", darkgray, "NONE"],

        # MatchAdd
        [ "DocCommentINFO",  black, red, "NONE"],
        [ "DocCommentTODO",  black, red, "NONE"],
        [ "debugFn",  "NONE", red, "NONE"],

        # Telescope
        [ "TelescopeBorder",  "NONE", gray, "NONE"],
        [ "TelescopeMatching",  "NONE", orange, "BOLD"],
        [ "TelescopeNormal", "NONE", white, "NONE"],
        [ "TelescopePreviewBorder",  "NONE", darkblue, "NONE"],
        [ "TelescopeSelection",  "NONE", darkblue, "BOLD"],

        # Signify
        [ "SignifyLineAdd", "DiffAdd"],
        [ "SignifySignAdd", "DiffAdd"],
        [ "SignifySignChange", "DiffChange"],
        [ "SignifySignDelete", "DiffDelete"],
        [ "diffAdded", "DiffAdd"],
        [ "diffRemoved", "DiffDelete"],

        # IlluminateWord
        [ "illuminatedWord", gray239, "NONE", "NONE"],

        # C
        [ "cConditional", "Conditional"],
        [ "cStatement", "showReturn"],

        # PHP
        [ "phpClasses", "Function"],
        [ "phpComment", "Doc"],
        [ "phpCommentStar", "Doc"],
        [ "phpCommentTitle", "Doc"],
        [ "phpConditional", "Conditional"],
        [ "phpDefine", "normal"],
        [ "phpDocComment", "Doc"],
        [ "phpDocIdentifier", "Doc"],
        [ "phpDocParam", "Doc"],
        [ "phpDocTags", "Doc"],
        [ "phpException", "showReturn"],
        [ "phpKeyword", "Structure"],
        [ "phpMemberSelector", "Foreground"],
        [ "phpNullValue", "NONE", darkmagenta, "ITALIC" ],
        [ "phpRepeat", "Repeat"],
        [ "phpStatement", "showReturn"],
        [ "phpType", "Type"],

        # HTML
        [ "htmlEndTag", "Tags"],
        [ "htmlLink", "NONE", pink, "underline" ],
        [ "htmlSpecialTagName",  "NONE", magenta, "NONE"],
        [ "htmlString", "String"],
        [ "htmlTag", "Tags"],
        [ "htmlTagName", "Tags"],

        # TWIG
        [ "twigStatement", "Conditional"],
        [ "twigString", "String"],

        # RUBY
        [ "rubyComment", "Comment"],

        # PYTHON/DJANGO
        [ "djangoStatement", "Structure"],
        [ "pythonClass", "Foreground" ],
        [ "pythonConditional", "Conditional"],
        [ "pythonException", "showReturn"],
        [ "pythonStatement", "Structure"],

        # JS
        [ "javascriptConditional", "Conditional"],
        [ "javascriptNumber", "Number"],
        [ "javascriptStatement", "showReturn"],
        [ "jsFunction", "function"],

        # TREESITTER
        [ "TSBoolean", "Boolean"],
        [ "TSConditional", "Conditional"],
        [ "TSConstBuiltin", "Builtin"],
        [ "TSConstMacro", "Foreground"],
        [ "TSConstant", "Constant"],
        [ "TSConstructor", "Foreground"],
        [ "TSException", "showReturn"],
        [ "TSFuncBuiltin", "Foreground"],
        [ "TSFunction", "Function"],
        [ "TSInclude", "Foreground"],
        [ "TSKeyword", "Foreground"],
        [ "TSKeywordFunction", "Foreground"],
        [ "TSKeywordOperator", "Repeat"],
        [ "TSKeywordReturn", "showReturn"],
        [ "TSMethod", "Foreground"],
        [ "TSOperator", "Foreground"],
        [ "TSParameter", "Foreground"],
        [ "TSProperty", "Foreground"],
        [ "TSRepeat", "Repeat"],
        [ "TSString", "string"],
        [ "TSType", "Foreground"],
        [ "TSTypeBuiltin", "Foreground"],
        [ "TSVariable", "Foreground"],
        [ "TSVariableBuiltin", "Foreground"],
        [ "TScomment", "Doc"],
        [ "TreesitterContext", "NONE", "NONE", "reverse"],
        [ "commentTSConstant", "Doc"],
    ]

    # Define the color palette used by :terminal when in GUI Vim
    # or in TUI Vim when 'termguicolors' is enabled. If this list
    # is empty or if it doesn't contain exactly 16 items, the corresponding
    # Vim variable won't be set.
    #
    # The expected values are colors defined in step 3.
    #
    # Terminal emulators use a basic palette of 16 colors that can be
    # addressed by CLI and TUI tools via their name or their index, from
    # 0 to 15. The list is not really standardized but it is generally
    # assumed to look like this:
    #
    #   Index | Name
    #  -------|-------------
    #   0     | black
    #   1     | darkred
    #   2     | darkgreen
    #   3     | darkyellow
    #   4     | darkblue
    #   5     | darkmagenta
    #   6     | darkcyan
    #   7     | gray
    #   8     | darkgray
    #   9     | red
    #   10    | green
    #   11    | yellow
    #   12    | blue
    #   13    | magenta
    #   14    | cyan
    #   15    | white
    #
    # While you are certainly free to make colors 0 to 7 shades of blue,
    # this will inevitably cause usability issues so… be careful.
    terminal_ansi_colors = [
        black,
        red,
        darkgreen,
        orange,
        darkblue,
        darkmagenta,
        darkcyan,
        gray,
        darkgray,
        pink,
        green,
        yellow,
        blue,
        magenta,
        cyan,
        white
    ]

    # Step 5: generation
    #
    # From a separate shell:
    #
    #     $ erb -T - bar.erb > bar.vim
    #
    # From Vim:
    #
    #     :!erb -T - % > %<.vim
    #
    # If this template comes with a Makefile, you can do it from a separate shell,
    # with the make program:
    #
    #     $ make

    # These online resources can help you design your colorscheme:
    #
    #   * http://upload.wikimedia.org/wikipedia/en/1/15/Xterm_256color_chart.svg
    #         the xterm palette
    #   * http://whatcolor.herokuapp.com/
    #         play with hexadecimal colors right in the address bar (currently down)
    #   * http://color.hailpixel.com/
    #         similar concept, fuzzier implementation
    #   * http://colourco.de/
    #         similar concept, fancier implementation
    #   * http://www.colr.org/
    #         extract a palette from an image
    #   * http://colores.manugarri.com/
    #         search for 'word', get images and color palettes
    #   * http://www.colourlovers.com/palettes
    #         user-created palettes
    #   * http://www.perbang.dk/color+scheme/
    #         a no-nonsense colorscheme generator
    #   * https://color.adobe.com/
    #         Adobe's fancy colorscheme generator
    #   * http://paletton.com/
    #         The classic 'Color Scheme Designer', rebranded
    #   * http://vrl.cs.brown.edu/color
    #         A very smart palette generator
    #   * https://cmcenroe.me/2018/04/03/colour-scheme.html
    #         "I Made My Own Colour Scheme and You Can Too!"

    # A few general advices:
    #
    #   * The Windows console is limited to the 16 so-called "ANSI" colors but it used to
    #     have a few of them interverted which makes numbers impractical. Use color names
    #     instead of numbers: :help cterm-colors
    #   * The Windows console (yeah…) doesn't do italics, underlines or bolded text;
    #     it is limited to normal and reverse. Keep that in mind if you want
    #     your colorscheme to be usable in as many environments as possible by as many
    #     people as possible.
    #   * Actually, terminal emulators rarely do italics.
    #   * All of the terminal emulators in use these days allow their users to
    #     change the 16 so-called "ANSI" colors. It is also possible on some platforms
    #     to change some or all of the 256 colors in the xterm palette. Don't take
    #     anything for granted.
    #   * When used against a light background, strong colors work better than muted
    #     ones. Light or dark doesn't really matters. Also, it is harder to discriminate
    #     between two similar colors on a light background.
    #   * Both strong and muted colors work well against a dark background. It is also
    #     easier to work with similar colors, but dark colors don't work at all.
    #   * Use as many text samples as possible. String-heavy languages may look completely
    #     different than keyword-heavy ones. This can have an impact on the usability
    #     of your colorscheme.
    #   * Most terminal emulators and terminal multiplexers currently in use on unix-like
    #     systems support 256 colors but they almost always default to a '$TERM' that tells
    #     Vim otherwise. Your users will need to make sure their terminal emulator/multiplexer
    #     is correctly set up if they want to enjoy the best possible experience.

    # Many thanks to Barry Arthur (https://github.com/dahu) for the original idea.

    # You don't need to edit anything beyond this line.
-%>
" <%= information[:name] %>.vim -- Vim color scheme.
" Author:      <%= information[:author] %> (<%= information[:email] %>)
" Webpage:     <%= information[:webpage] %>
" Description: <%= information[:description] %>
" Last Change: <%= Time.new.strftime "%Y-%m-%d" %>

hi clear

if exists("syntax_on")
  syntax reset
endif

let colors_name = "<%= information[:name].downcase %>"

if ($TERM =~ '256' || &t_Co >= 256) || has("gui_running")
<% for highlight in highlights -%>
<% if highlight.length == 4 -%>
    hi <%= highlight[0] %> ctermbg=<%= highlight[1].kind_of?(String) ? highlight[1] : highlight[1][1] %> ctermfg=<%= highlight[2].kind_of?(String) ? highlight[2] : highlight[2][1] %> cterm=<%= highlight[3] %> guibg=<%= highlight[1].kind_of?(String) ? highlight[1] : highlight[1][0] %> guifg=<%= highlight[2].kind_of?(String) ? highlight[2] : highlight[2][0] %> gui=<%= highlight[3] %>
<% elsif highlight.length > 4 -%>
    hi <%= highlight[0] %> ctermbg=<%= highlight[1].kind_of?(String) ? highlight[1] : highlight[1][1] %> ctermfg=<%= highlight[2].kind_of?(String) ? highlight[2] : highlight[2][1] %> cterm=<%= highlight[3] %> guibg=<%= highlight[1].kind_of?(String) ? highlight[1] : highlight[1][0] %> guifg=<%= highlight[2].kind_of?(String) ? highlight[2] : highlight[2][0] %> gui=<%= highlight[3] %> guisp=<%= highlight[4].kind_of?(String) ? highlight[4] : highlight[4][0] %>
<% end -%>
<% end -%>

elseif &t_Co == 8 || $TERM !~# '^linux' || &t_Co == 16
    set t_Co=16
<%= '' %>
<% for highlight in highlights -%>
<% if highlight.length > 2 -%>
    hi <%= highlight[0] %> ctermbg=<%= highlight[1].kind_of?(String) ? highlight[1] : highlight[1][2] %> ctermfg=<%= highlight[2].kind_of?(String) ? highlight[2] : highlight[2][2] %> cterm=<%= highlight[3] %>
<% end -%>
<% end -%>
endif
<% links = highlights.select do |highlight| -%>
<% highlight.length == 2 -%>
<% end -%>
<% if links.length > 0 -%>
<%= '' %>
<% for link in links -%>
hi link <%= link[0] %> <%= link[1] %>
<% end -%>
<% end -%>
<% if terminal_ansi_colors.length == 16 -%>
<%= '' %>
let g:terminal_ansi_colors = [ <% for color in terminal_ansi_colors -%>'<%= color[0] %>', <% end -%>]
<% end -%>

" Generated with RNB (https://github.com/romainl/vim-rnb)
